#pragma once

namespace RTTI
{

#define RTTI_PLATFORM_WINDOWS 1
#define RTTI_PLATFORM_LINUX 2

#define RTTI_COMPILER_MSVC 1
#define RTTI_COMPILER_GNUC 2

#define RTTI_ENDIAN_LITTLE 1
#define RTTI_ENDIAN_BIG 2

#define RTTI_ARCH_32 1
#define RTTI_ARCH_64 2

/////////////////////////////////////////////////////////////////////////////////////////
// Platform
/////////////////////////////////////////////////////////////////////////////////////////
#if defined( __WIN32__ ) || defined( _WIN32 )
#   define RTTI_PLATFORM RTTI_PLATFORM_WINDOWS
#else
#   define RTTI_PLATFORM RTTI_PLATFORM_LINUX
#endif

/////////////////////////////////////////////////////////////////////////////////////////
// Compiler
/////////////////////////////////////////////////////////////////////////////////////////
#if defined( __GNUC__ )
#   define RTTI_COMPILER RTTI_COMPILER_GNUC
#   define RTTI_COMP_VER (((__GNUC__)*1000) + \
                         (__GNUC_MINOR__*100) + \
                          __GNUC_PATCHLEVEL__)
#elif defined( _MSC_VER )
#   define RTTI_COMPILER RTTI_COMPILER_MSVC
#   define RTTI_COMP_VER _MSC_VER
#else
#   error "No known compiler. Abort! Abort!" 
#endif


/////////////////////////////////////////////////////////////////////////////////////////
// Architecture
/////////////////////////////////////////////////////////////////////////////////////////
#if defined(__x86_64__) || defined(_M_X64) || defined(__powerpc64__) || defined(__alpha__) ||\
    defined(__ia64__) || defined(__s390__) || defined(__s390x__)
#   define RTTI_ARCH_TYPE RTTI_ARCH_64
#else
#   define RTTI_ARCH_TYPE RTTI_ARCH_32
#endif

#if RTTI_COMPILER == RTTI_COMPILER_MSVC
#   define RTTI_INLINE          inline
#   define RTTI_FORCE_INLINE    __forceinline
#elif RTTI_COMPILER == RTTI_COMPILER_GNUC
#   define RTTI_INLINE          inline
#   define RTTI_FORCE_INLINE    inline __attribute__((always_inline))
#else
#   define RTTI_INLINE          inline
#   define RTTI_FORCE_INLINE    inline // no force inline for other platforms possible
#endif


/////////////////////////////////////////////////////////////////////////////////////////
// Compiler specific cmds for export and import code to DLL
/////////////////////////////////////////////////////////////////////////////////////////
#if RTTI_COMPILER == RTTI_COMPILER_MSVC || __MINGW32__ || __CYGWIN__
#     define RTTI_HELPER_DLL_IMPORT __declspec( dllimport )
#     define RTTI_HELPER_DLL_EXPORT __declspec( dllexport )
#     define RTTI_HELPER_DLL_LOCAL
#elif RTTI_COMPILER == RTTI_COMPILER_GNUC
#   if RTTI_COMP_VER >= 4000
#       define RTTI_HELPER_DLL_IMPORT __attribute__ ((visibility ("default")))
#       define RTTI_HELPER_DLL_EXPORT __attribute__ ((visibility ("default")))
#       define RTTI_HELPER_DLL_LOCAL  __attribute__ ((visibility ("hidden")))
#   else
#       define RTTI_HELPER_DLL_IMPORT
#       define RTTI_HELPER_DLL_EXPORT
#       define RTTI_HELPER_DLL_LOCAL
#   endif
#else
#   error "Do not know how to export classes for this platform"
#endif

#ifdef RTTI_DLL // compiled as a DLL
#   ifdef RTTI_DLL_EXPORTS // defined if we are building the DLL 
#       define RTTI_API RTTI_HELPER_DLL_EXPORT
#   else
#       define RTTI_API RTTI_HELPER_DLL_IMPORT
#   endif
#   define RTTI_LOCAL RTTI_HELPER_DLL_LOCAL
#else // it's a static lib.
#   define RTTI_API
#   define RTTI_LOCAL
#endif

/////////////////////////////////////////////////////////////////////////////////////////
// Integer formats of fixed bit width
/////////////////////////////////////////////////////////////////////////////////////////
typedef unsigned char uint8;
typedef unsigned short uint16;
typedef unsigned int uint32;
typedef short int16;
typedef char int8;
typedef int int32;

/////////////////////////////////////////////////////////////////////////////////////////
// Disable some MSVC compile warnings
/////////////////////////////////////////////////////////////////////////////////////////
#if  RTTI_COMPILER == RTTI_COMPILER_MSVC
// Save warnings state
#   pragma warning (push)
// Turn off warnings generated by long std templates
// This warns about truncation to 255 characters in debug/browse info
#   pragma warning (disable : 4786)

// Turn off warnings generated by long std templates
// This warns about truncation to 255 characters in debug/browse info
#   pragma warning (disable : 4503)

// disable: "<type> needs to have dll-interface to be used by clients'
// Happens on STL member variables which are not public therefore is ok
#   pragma warning (disable : 4251)

// disable: "non dll-interface class used as base for dll-interface class"
// Happens when deriving from Singleton because bug in compiler ignores
// template export
#   pragma warning (disable : 4275)

// disable: "C++ Exception Specification ignored"
// This is because MSVC 6 did not implement all the C++ exception
// specifications in the ANSI C++ draft.
#   pragma warning( disable : 4290 )

// disable: "no suitable definition provided for explicit template
// instantiation request" Occurs in VC7 for no justifiable reason on all
// #includes of Singleton
#   pragma warning( disable: 4661)

// disable: deprecation warnings when using CRT calls in VC8
// These show up on all C runtime lib code in VC8, disable since they clutter
// the warnings with things we may not be able to do anything about (e.g.
// generated code from nvparse etc). I doubt very much that these calls
// will ever be actually removed from VC anyway, it would break too much code.
#   pragma warning( disable: 4996)

// disable: "unreferenced formal parameter"
// Many versions of VC have bugs which generate this error in cases where they shouldn't
#   pragma warning (disable : 4100)
#endif

} // end namespace RTTI
