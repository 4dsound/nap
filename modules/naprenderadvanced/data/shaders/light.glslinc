// NAP Shader include file

// Light structure for all lights. Not all types use all members.
struct Light
{
	mat4 lightViewProjection;
	vec3 origin;
	vec3 direction;
	vec3 color;
	float intensity;
	float attenuation;
	float angle;
	float falloff;
	uint flags;
};

// Returns the light type index of the specified light flag
uint getLightType(uint flags)
{
	return flags & 0xff;
}


// Returns an incidence value of a light and surface
// @return incidence value [0.0 - 1.0], -1.0 if the light type is not supported
float getSurfaceIncidence(Light light, vec3 surfaceNormal, vec3 surfacePosition)
{
	// Directional
	if ((light.flags & (1U << 0)) > 0U)
	{
		return 1.0 - max(dot(surfaceNormal, -light.direction), 0.0);
	}

	// Point
	if ((light.flags & (1U << 1)) > 0U)
	{
		vec3 inv_light_direction = normalize(light.origin - surfacePosition);
		return 1.0 - max(dot(surfaceNormal, inv_light_direction), 0.0);
	}

	// Light type not supported
	return -1.0;
}
