#!/usr/bin/env python3

import argparse
import json
import os
import sys

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)
 
def read_json(json_path, element_name):
    # Read in the JSON
    with open(json_path) as json_file:
        try:
            json_dict = json.load(json_file)
        except Exception as e:
            eprint(f"Error: Failed to parse {json_path}:", e)
            return None
        if not element_name in json_dict:
            eprint(f"Error: Missing element '{element_name}' in {json_path}")
            return None

        if not type(json_dict[element_name]) is list:
            eprint(f"Error: Element '{element_name}' in {json_path} is not an array")
            return None

        return json_dict[element_name]

def list_in_json_to_cmake(json_path, element_name, output_variable, output_filename):
    # Check our input file exists
    if not os.path.exists(json_path):
        eprint(f"Error: JSON input file '{json_path}' missing")
        return False

    # If any existing output file exists remove it.  This ensure that CMake will fail if our JSON parsing etc fails.
    if os.path.exists(output_filename):
        os.remove(output_filename)

    # Read in the JSON
    parsed_list = read_json(json_path, element_name)
    if parsed_list is None:
        return False

    # Write out
    json_filename = os.path.basename(json_path)
    formatted_list = ' '.join(f'"{w}"' for w in parsed_list)
    try:
        with open(output_filename, 'w') as out_file:
            out_file.write("# Don't edit this file\n")
            out_file.write(f"#\n# It was auto generated by the build system from {json_filename} which should be edited instead\n\n")
            out_file.write(f"set({output_variable} {formatted_list})\n")
    except Exception as e:
        eprint(f"Error: Failed to write to {output_filename}:", e)
        return False

    return True

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('JSON_PATH')
    parser.add_argument('ELEMENT_NAME')
    parser.add_argument('OUTPUT_VARIABLE')
    parser.add_argument('OUTPUT_FILE')
    args = parser.parse_args()

    if not list_in_json_to_cmake(args.JSON_PATH, args.ELEMENT_NAME, args.OUTPUT_VARIABLE, args.OUTPUT_FILE):
        sys.exit(1)
